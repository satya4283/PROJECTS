package com.satya.Controller;

import java.util.List;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RestController;

import com.satya.Model.User;
import com.satya.Repository.UserRepository;

@RestController
public class UserController {
	
	@Autowired
	private UserRepository userRepo;
	
	
	
	@PostMapping("/users")
	public User createUser(@RequestBody User user) {
		
		User newUser = new User();
		newUser.setFirstName(user.getFirstName());
		newUser.setLastName(user.getLastName());
		newUser.setEmail(user.getEmail());
		newUser.setPassword(user.getPassword());
		newUser.setId(user.getId());
		
		User savedUser =userRepo.save(newUser);
		
		return savedUser;
	}
	
	@GetMapping("/users")
	public List<User> getUsers() {
		
		List<User> users = userRepo.findAll();
		
		return users;
	}
	
	@GetMapping("/users/{userId}")
	public User getUserById(@PathVariable("userId") Integer id) throws Exception {
		
		Optional<User> user = userRepo.findById(id);
		
		if(user.isPresent())
		{
			return user.get();
		}
		
		throw new Exception("user is not exist with Id: "+ id);
		
	}
	
	@PutMapping("user/{userId}")
	public User updateUser(@RequestBody User user ,@PathVariable int userId) throws Exception {
		
		Optional<User> user1 = userRepo.findById(userId);
		
		if(user1.isEmpty())
		{
			throw new Exception("user is not exit with id: "+userId);
		}
		
		User oldUser = user1.get();
		
		if(user.getFirstName()!=null) {
			oldUser.setFirstName(user.getFirstName());
		}
		if(user.getLastName()!=null) {
			oldUser.setLastName(user.getLastName());
		}
		if(user.getEmail()!=null) {
			oldUser.setEmail(user.getEmail());
		}
		
		User updatedUser = userRepo.save(oldUser);
		
		return updatedUser;
	}
	
	@DeleteMapping("/user/{userId}")
	public String deleteUser(@PathVariable int userId) throws Exception {
		
		Optional<User> user = userRepo.findById(userId);
		
		if(user.isEmpty()) {
			throw new Exception("user does not exist with Id: "+ userId);
		}
		
		userRepo.delete(user.get());
		
		return "user deleted successfully with id: "+ userId;
	}

}
